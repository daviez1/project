{
  "version": 3,
  "sources": ["../../@tanstack/svelte-query/dist/context.js", "../../@tanstack/svelte-query/dist/useIsRestoring.js", "../../@tanstack/svelte-query/dist/useQueryClient.js", "../../@tanstack/svelte-query/dist/utils.js", "../../@tanstack/svelte-query/dist/createBaseQuery.js", "../../@tanstack/svelte-query/dist/createQuery.js", "../../@tanstack/svelte-query/dist/queryOptions.js", "../../@tanstack/svelte-query/dist/createQueries.js", "../../@tanstack/svelte-query/dist/createInfiniteQuery.js", "../../@tanstack/svelte-query/dist/infiniteQueryOptions.js", "../../@tanstack/svelte-query/dist/createMutation.js", "../../@tanstack/svelte-query/dist/useMutationState.js", "../../@tanstack/svelte-query/dist/useIsFetching.js", "../../@tanstack/svelte-query/dist/useIsMutating.js", "../../@tanstack/svelte-query/dist/useHydrate.js", "../../@tanstack/svelte-query/dist/HydrationBoundary.svelte", "../../@tanstack/svelte-query/dist/QueryClientProvider.svelte"],
  "sourcesContent": ["import { getContext, setContext } from 'svelte';\nimport { readable } from 'svelte/store';\nconst _contextKey = '$$_queryClient';\n/** Retrieves a Client from Svelte's context */\nexport const getQueryClientContext = () => {\n    const client = getContext(_contextKey);\n    if (!client) {\n        throw new Error('No QueryClient was found in Svelte context. Did you forget to wrap your component with QueryClientProvider?');\n    }\n    return client;\n};\n/** Sets a QueryClient on Svelte's context */\nexport const setQueryClientContext = (client) => {\n    setContext(_contextKey, client);\n};\nconst _isRestoringContextKey = '$$_isRestoring';\n/** Retrieves a `isRestoring` from Svelte's context */\nexport const getIsRestoringContext = () => {\n    try {\n        const isRestoring = getContext(_isRestoringContextKey);\n        return isRestoring ? isRestoring : readable(false);\n    }\n    catch (error) {\n        return readable(false);\n    }\n};\n/** Sets a `isRestoring` on Svelte's context */\nexport const setIsRestoringContext = (isRestoring) => {\n    setContext(_isRestoringContextKey, isRestoring);\n};\n", "import { getIsRestoringContext } from './context.js';\nexport function useIsRestoring() {\n    return getIsRestoringContext();\n}\n", "import { getQueryClientContext } from './context.js';\nexport function useQueryClient(queryClient) {\n    if (queryClient)\n        return queryClient;\n    return getQueryClientContext();\n}\n", "export function isSvelteStore(obj) {\n    return 'subscribe' in obj && typeof obj.subscribe === 'function';\n}\nexport function noop() { }\n", "import { derived, get, readable } from 'svelte/store';\nimport { notifyManager } from '@tanstack/query-core';\nimport { useIsRestoring } from './useIsRestoring.js';\nimport { useQueryClient } from './useQueryClient.js';\nimport { isSvelteStore, noop } from './utils.js';\nexport function createBaseQuery(options, Observer, queryClient) {\n    /** Load query client */\n    const client = useQueryClient(queryClient);\n    const isRestoring = useIsRestoring();\n    /** Converts options to a svelte store if not already a store object */\n    const optionsStore = isSvelteStore(options) ? options : readable(options);\n    /** Creates a store that has the default options applied */\n    const defaultedOptionsStore = derived([optionsStore, isRestoring], ([$optionsStore, $isRestoring]) => {\n        const defaultedOptions = client.defaultQueryOptions($optionsStore);\n        defaultedOptions._optimisticResults = $isRestoring\n            ? 'isRestoring'\n            : 'optimistic';\n        return defaultedOptions;\n    });\n    /** Creates the observer */\n    const observer = new Observer(client, get(defaultedOptionsStore));\n    defaultedOptionsStore.subscribe(($defaultedOptions) => {\n        // Do not notify on updates because of changes in the options because\n        // these changes should already be reflected in the optimistic result.\n        observer.setOptions($defaultedOptions, { listeners: false });\n    });\n    const result = derived(isRestoring, ($isRestoring, set) => {\n        const unsubscribe = $isRestoring\n            ? noop\n            : observer.subscribe(notifyManager.batchCalls(set));\n        observer.updateResult();\n        return unsubscribe;\n    });\n    /** Subscribe to changes in result and defaultedOptionsStore */\n    const { subscribe } = derived([result, defaultedOptionsStore], ([$result, $defaultedOptionsStore]) => {\n        $result = observer.getOptimisticResult($defaultedOptionsStore);\n        return !$defaultedOptionsStore.notifyOnChangeProps\n            ? observer.trackResult($result)\n            : $result;\n    });\n    return { subscribe };\n}\n", "import { QueryObserver } from '@tanstack/query-core';\nimport { createBaseQuery } from './createBaseQuery.js';\nexport function createQuery(options, queryClient) {\n    return createBaseQuery(options, QueryObserver, queryClient);\n}\n", "export function queryOptions(options) {\n    return options;\n}\n", "import { QueriesObserver, notifyManager } from '@tanstack/query-core';\nimport { derived, get, readable } from 'svelte/store';\nimport { useIsRestoring } from './useIsRestoring.js';\nimport { useQueryClient } from './useQueryClient.js';\nimport { isSvelteStore, noop } from './utils.js';\nexport function createQueries({ queries, ...options }, queryClient) {\n    const client = useQueryClient(queryClient);\n    const isRestoring = useIsRestoring();\n    const queriesStore = isSvelteStore(queries) ? queries : readable(queries);\n    const defaultedQueriesStore = derived([queriesStore, isRestoring], ([$queries, $isRestoring]) => {\n        return $queries.map((opts) => {\n            const defaultedOptions = client.defaultQueryOptions(opts);\n            // Make sure the results are already in fetching state before subscribing or updating options\n            defaultedOptions._optimisticResults = $isRestoring\n                ? 'isRestoring'\n                : 'optimistic';\n            return defaultedOptions;\n        });\n    });\n    const observer = new QueriesObserver(client, get(defaultedQueriesStore), options);\n    defaultedQueriesStore.subscribe(($defaultedQueries) => {\n        // Do not notify on updates because of changes in the options because\n        // these changes should already be reflected in the optimistic result.\n        observer.setQueries($defaultedQueries, options, { listeners: false });\n    });\n    const result = derived([isRestoring], ([$isRestoring], set) => {\n        const unsubscribe = $isRestoring\n            ? noop\n            : observer.subscribe(notifyManager.batchCalls(set));\n        return () => unsubscribe();\n    });\n    const { subscribe } = derived([result, defaultedQueriesStore], \n    // @ts-expect-error svelte-check thinks this is unused\n    ([$result, $defaultedQueriesStore]) => {\n        const [rawResult, combineResult, trackResult] = observer.getOptimisticResult($defaultedQueriesStore, options.combine);\n        $result = rawResult;\n        return combineResult(trackResult());\n    });\n    return { subscribe };\n}\n", "import { InfiniteQueryObserver } from '@tanstack/query-core';\nimport { createBaseQuery } from './createBaseQuery.js';\nexport function createInfiniteQuery(options, queryClient) {\n    return createBaseQuery(options, InfiniteQueryObserver, queryClient);\n}\n", "export function infiniteQueryOptions(options) {\n    return options;\n}\n", "import { derived, get, readable } from 'svelte/store';\nimport { MutationObserver, notifyManager } from '@tanstack/query-core';\nimport { useQueryClient } from './useQueryClient.js';\nimport { isSvelteStore, noop } from './utils.js';\nexport function createMutation(options, queryClient) {\n    const client = useQueryClient(queryClient);\n    const optionsStore = isSvelteStore(options) ? options : readable(options);\n    const observer = new MutationObserver(client, get(optionsStore));\n    let mutate;\n    optionsStore.subscribe(($options) => {\n        mutate = (variables, mutateOptions) => {\n            observer.mutate(variables, mutateOptions).catch(noop);\n        };\n        observer.setOptions($options);\n    });\n    const result = readable(observer.getCurrentResult(), (set) => {\n        return observer.subscribe(notifyManager.batchCalls((val) => set(val)));\n    });\n    const { subscribe } = derived(result, ($result) => ({\n        ...$result,\n        mutate,\n        mutateAsync: $result.mutate,\n    }));\n    return { subscribe };\n}\n", "import { readable } from 'svelte/store';\nimport { notifyManager, replaceEqualDeep } from '@tanstack/query-core';\nimport { useQueryClient } from './useQueryClient.js';\nfunction getResult(mutationCache, options) {\n    return mutationCache\n        .findAll(options.filters)\n        .map((mutation) => (options.select ? options.select(mutation) : mutation.state));\n}\nexport function useMutationState(options = {}, queryClient) {\n    const client = useQueryClient(queryClient);\n    const mutationCache = client.getMutationCache();\n    let result = getResult(mutationCache, options);\n    const { subscribe } = readable(result, (set) => {\n        return mutationCache.subscribe(notifyManager.batchCalls(() => {\n            const nextResult = replaceEqualDeep(result, getResult(mutationCache, options));\n            if (result !== nextResult) {\n                result = nextResult;\n                set(result);\n            }\n        }));\n    });\n    return { subscribe };\n}\n", "import { notifyManager } from '@tanstack/query-core';\nimport { readable } from 'svelte/store';\nimport { useQueryClient } from './useQueryClient.js';\nexport function useIsFetching(filters, queryClient) {\n    const client = useQueryClient(queryClient);\n    const cache = client.getQueryCache();\n    // isFetching is the prev value initialized on mount *\n    let isFetching = client.isFetching(filters);\n    const { subscribe } = readable(isFetching, (set) => {\n        return cache.subscribe(notifyManager.batchCalls(() => {\n            const newIsFetching = client.isFetching(filters);\n            if (isFetching !== newIsFetching) {\n                // * and update with each change\n                isFetching = newIsFetching;\n                set(isFetching);\n            }\n        }));\n    });\n    return { subscribe };\n}\n", "import { notifyManager } from '@tanstack/query-core';\nimport { readable } from 'svelte/store';\nimport { useQueryClient } from './useQueryClient.js';\nexport function useIsMutating(filters, queryClient) {\n    const client = useQueryClient(queryClient);\n    const cache = client.getMutationCache();\n    // isMutating is the prev value initialized on mount *\n    let isMutating = client.isMutating(filters);\n    const { subscribe } = readable(isMutating, (set) => {\n        return cache.subscribe(notifyManager.batchCalls(() => {\n            const newIisMutating = client.isMutating(filters);\n            if (isMutating !== newIisMutating) {\n                // * and update with each change\n                isMutating = newIisMutating;\n                set(isMutating);\n            }\n        }));\n    });\n    return { subscribe };\n}\n", "import { hydrate } from '@tanstack/query-core';\nimport { useQueryClient } from './useQueryClient.js';\nexport function useHydrate(state, options, queryClient) {\n    const client = useQueryClient(queryClient);\n    if (state) {\n        hydrate(client, state, options);\n    }\n}\n", null, null],
  "mappings": "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",
  "names": []
}
